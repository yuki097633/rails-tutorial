"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@heroku-cli/command");
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
class ReviewappsDisable extends command_1.Command {
    async run() {
        const { flags } = this.parse(ReviewappsDisable);
        if (flags.app && flags.beta) {
            // remove app & remote flags when Review Apps 1.0 is deprecated
            this.warn('Specifying an app via --app or --remote is no longer needed when using --beta');
        }
        if (flags.beta) {
            this.warn('Review Apps 2.0 is currently in limited beta testing. You may request an invite to the program by opening a support ticket.');
        }
        let settings = {
            automatic_review_apps: undefined,
            destroy_stale_apps: undefined,
            pipeline: undefined,
            repo: undefined,
            pull_requests: {
                enabled: undefined,
                auto_deploy: undefined,
                auto_destroy: undefined
            }
        };
        if (flags.autodeploy) {
            this.log('Disabling auto deployment...');
            if (flags.beta) {
                settings.automatic_review_apps = false;
            }
            else {
                settings.pull_requests.auto_deploy = false;
            }
        }
        if (flags.autodestroy) {
            this.log('Disabling auto destroy...');
            if (flags.beta) {
                settings.destroy_stale_apps = false;
            }
            else {
                settings.pull_requests.auto_destroy = false;
            }
        }
        cli_ux_1.default.action.start('Configuring pipeline');
        let { body: pipeline } = await this.heroku.get(`/pipelines/${flags.pipeline}`);
        settings.pipeline = pipeline.id;
        let { body: feature } = await this.heroku.get('/account/features/dashboard-repositories-api');
        if (feature.enabled) {
            let { body: repo } = await this.heroku.get(`/pipelines/${pipeline.id}/repo`, {
                headers: { Accept: 'application/vnd.heroku+json; version=3.repositories-api' }
            });
            settings.repo = repo.full_name;
        }
        else {
            let { body: repo } = await this.heroku.get(`/pipelines/${pipeline.id}/repository`);
            settings.repo = repo.repository.name;
        }
        if (flags.autodeploy || flags.autodestroy) {
            if (flags.beta) {
                await this.heroku.patch(`/pipelines/${pipeline.id}/review-app-config`, {
                    body: settings,
                    headers: { Accept: 'application/vnd.heroku+json; version=3.review-apps' }
                });
            }
            else {
                let { body: app } = await this.heroku.get(`/apps/${flags.app}`);
                await this.heroku.patch(`/apps/${app.id}/github`, {
                    hostname: 'kolkrabbi.heroku.com',
                    body: settings
                });
            }
        }
        else {
            // if no flags are passed then the user is disabling review apps
            if (flags.beta) {
                await this.heroku.delete(`/pipelines/${pipeline.id}/review-app-config`, {
                    body: settings,
                    headers: { Accept: 'application/vnd.heroku+json; version=3.review-apps' }
                });
            }
            else {
                let { body: app } = await this.heroku.get(`/apps/${flags.app}`);
                settings.pull_requests = { enabled: false };
                await this.heroku.patch(`/apps/${app.id}/github`, {
                    hostname: 'kolkrabbi.heroku.com',
                    body: settings
                });
            }
        }
        cli_ux_1.default.action.stop();
    }
}
ReviewappsDisable.description = 'disable review apps and/or settings on an existing pipeline';
ReviewappsDisable.examples = [
    '$ heroku reviewapps:disable -p my-pipeline -a my-app --autodeploy'
];
ReviewappsDisable.flags = {
    app: command_1.flags.app({
        description: 'parent app used by review apps',
    }),
    remote: command_1.flags.remote(),
    pipeline: command_1.flags.pipeline({
        required: true,
    }),
    autodeploy: command_1.flags.boolean({
        description: 'disable autodeployments'
    }),
    autodestroy: command_1.flags.boolean({
        description: 'disable automatically destroying review apps'
    }),
    beta: command_1.flags.boolean({
        description: 'use Review Apps 2.0 Beta',
    })
};
exports.default = ReviewappsDisable;
